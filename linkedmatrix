#include <iostream>

class Node {
public:
    int value, row, col;
    Node* next;

    Node(int v, int r, int c) : value(v), row(r), col(c), next(nullptr) {}
};
class SparseMatrix {
private:
    Node* head;
    int rows, cols;
public:
    SparseMatrix(int r, int c) : head(nullptr), rows(r), cols(c) {}

    ~SparseMatrix() {
        while (head) {
            Node* temp = head;
            head = head->next;
            delete temp;
        }
    }

    void add(int value, int r, int c) {
        if (value == 0) return;
        
        Node* newNode = new Node(value, r, c);
        if (!head || r < head->row || (r == head->row && c < head->col)) {
            newNode->next = head;
            head = newNode;
        } else {
            Node* cur = head;
            while (cur->next && (cur->next->row < r || (cur->next->row == r && cur->next->col <= c))) {
                cur = cur->next;
            }
            newNode->next = cur->next;
            cur->next = newNode;
        }
    }

    void display() const {
        std::cout << "Sparse Matrix (Linked List Format):\n";
        for (Node* cur = head; cur; cur = cur->next) {
            std::cout << "Value: " << cur->value << ", Row: " << cur->row << ", Col: " << cur->col << '\n';
        }
    }
};

int main() {
    int r, c;

    std::cout << "Enter matrix rows: ";
    std::cin >> r;
    std::cout << "Enter matrix columns: ";
    std::cin >> c;

    SparseMatrix matrix(r, c);

    std::cout << "Enter matrix elements (row by row):\n";
    for (int i = 0; i < r; ++i) {
        for (int j = 0; j < c; ++j) {
            int val;
            std::cin >> val;
            matrix.add(val, i, j);
        }
    }

    matrix.display();

    return 0;
}
